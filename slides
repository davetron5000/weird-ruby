Are branching, null, and attributes all that OO? Let's get weird!
!TITLE
Are branching, null, and attributes all that OO?
Let's get weird!
David Copeland / @davetron5000

!NORMAL
STITCH FIX
Lead Engineer

!IMAGE: background=EFEFEF
images/dccar.jpg

!IMAGE: background=EFEFEF
images/cover.jpg

!IMAGE
images/top_chef.jpg

!IMAGE
images/daikon.jpg

!IMAGE
images/asian.jpg

!IMAGE
images/french.jpg

!SECTION
The Billion Dollar Mistake

!QUOTE
I was designing the first comprehensive type system for references in an object oriented language…I couldn't resist the temptation to put in a null reference, simply because it was so easy to implement.

!QUOTE2
This has led to innumerable errors, vulnerabilities, and system crashes, which have probably caused <strong>a billion dollars of pain and damage in the last forty years.</strong>

!BULLETS
No More <code>nil</code>
* all variables must have a value
* no default value
* no global sentinel for "nothing"

!CODE: callout=6

class Person
  attr_accessor :name, 
                :birthdate, 
                :title
  def initialize(name,birthdate,title=nil)
    @name      = name
    @birthdate = birthdate
    @title     = title
  end
  def greeting
    if title.nil?
      "Hello #{@name}"
    else
      "Hello #{@title} #{@name}"
    end
  end
end

!CODE: callout=11,12,13,14,15,16,17

class Person
  attr_accessor :name, 
                :birthdate, 
                :title
  def initialize(name,birthdate,title=nil)
    @name      = name
    @birthdate = birthdate
    @title     = title
  end
  def greeting
    if title.nil?
      "Hello #{@name}"
    else
      "Hello #{@title} #{@name}"
    end
  end
end

!CODE: language=ruby
$nil = Object.new do
  def nil?
    true
  end
end

!CODE: language=ruby callout=-1,-2,-3,-4,-5
$nil = Object.new do
  def nil?
    true
  end
end

!BULLETS
<code>nil</code>
* Variable unset
* Don't know value
* There is no value
* Value is "empty"

!CODE
file://weird/lib/weird/nil_like.rb

!CODE: callout=3
class Person
  attr_accessor :name, :birthdate, :title
  def initialize(name, birthdate, title=Unknown)
    @name      = name
    @birthdate = birthdate
    @title     = title
  end
end

!CODE: callout=3
class Person
  attr_accessor :name, :birthdate, :title
  def initialize(name, birthdate, title=NoValue)
    @name      = name
    @birthdate = birthdate
    @title     = title
  end
end

!CODE
class Person
  attr_accessor :name, :birthdate, :title
  def initialize(name, birthdate, title=Unknown)
    @name      = name
    @birthdate = birthdate
    @title     = title
  end
end

!CODE: callout=3
class Person
  def greet
    if title == Unknown
      "Hello #{name}"
    else
      "Hello #{title} #{name}"
    end
  end
end

!CODE: callout=3,4,5,6
class Person
  def greet
    if title == Unknown || 
       title == NoValue ||
       title == Unassigned ||
       title == Empty
      "Hello #{name}"
    else
      "Hello #{title} #{name}"
    end
  end
end

!CODE
file://weird/lib/weird/person_greet_better.rb

!CODE: language=ruby
file://weird/lib/weird/basic_object.rb

!CODE: language=ruby
file://weird/lib/weird/nil_like_sentinel.rb

!CODE
file://weird/lib/weird/person_greet_better.rb

!CODE: language=ruby
file://weird/lib/weird/person_greet_known_naive.rb

!CODE: language=ruby
file://weird/lib/weird/known_basic_object.rb

!CODE: language=ruby
file://weird/lib/weird/known_nil_like_sentinel.rb

!CODE: language=ruby
file://weird/lib/weird/person_greet_known_better.rb

!SECTION
Attributes

!CODE: language=ruby
file://weird/lib/weird/noattr/person_greeter.rb

!CODE: language=ruby
file://weird/lib/weird/noattr/person_greeter_attributes.rb

!CODE: language=ruby
file://weird/lib/weird/noattr/normalize_address.rb

!CODE: language=ruby callout=5,6
file://weird/lib/weird/noattr/normalize_address_updater.rb

!CODE: language=ruby
file://weird/lib/weird/noattr/person_with_update.rb

!CODE: language=ruby callout=5,9
class Person
  def update_attributes(&block)
    updater = Updater.new
    block.call(updater)
    transaction do
      updater.changed_attributes { |attribute,new_value|
        self.instance_variable_set("@#{attribute}",value)
      }
    end
  end
end

!CODE: language=ruby callout=5,6,7,8,9
class Person
  def update_attributes(&block)
    updater = Updater.new
    block.call(updater)
    updater.when_updated do |city,zip_code|
      unless zip_and_city_consistent?(updater.city,updater.zip_code)
        raise "address not consistent"
      end
    end
    updater.changed_attributes { |attribute,new_value|
      self.instance_variable_set("@#{attribute}",value)
    }
  end
end

!SECTION
<code>if</code>

!IMAGE: background=000
images/asm.jpg

!CODE: language=ruby
file://weird/lib/weird/anti_if/use_credit_card_service_typical.rb

!CODE: language=ruby
file://weird/lib/weird/anti_if/use_credit_card_service_better.rb

!CODE: language=ruby callout=-8,-9
file://weird/lib/weird/anti_if/use_credit_card_service_better.rb

!CODE: language=ruby
file://weird/lib/weird/anti_if/credit_card_charger_mistake.rb

!CODE: language=ruby
file://weird/lib/weird/anti_if/credit_card_service_strict.rb

!CODE: language=ruby callout=7,8,9
file://weird/lib/weird/anti_if/credit_card_service_strict_2.rb

!CODE: language=ruby callout=5
file://weird/lib/weird/anti_if/outcome_handler_no_if.rb

!CODE: language=ruby
class OutcomeNoIf < Outcome

private 

  def what_to_call(status)
    if status == 200
      :call_on_success
    elsif status < 500
      :call_on_decline
    else
      :call_on_exception
    end
  end
end

!CODE: language=ruby
class OutcomeNoIf < Outcome

private 

  def what_to_call(status)

                if ( status == 200 )  :call_on_success
                if ( status <  500 )  :call_on_decline



    else      :call_on_exception
  end
end

!CODE: language=ruby
class OutcomeNoIf < Outcome

private 

  def what_to_call(status)

       -> (status) { status == 200 }, :call_on_success
       -> (status) { status <  500 }, :call_on_decline



    else      :call_on_exception
  end
end

!CODE: language=ruby
class OutcomeNoIf < Outcome

private 

  def what_to_call(status)
    [
     [ -> (status) { status == 200 }, :call_on_success ],
     [ -> (status) { status <  500 }, :call_on_decline ],
    ]
    
    
    else      :call_on_exception
  end
end

!CODE: language=ruby
class OutcomeNoIf < Outcome

private 

  def what_to_call(status)
    [
     [ -> (status) { status == 200 }, :call_on_success ],
     [ -> (status) { status <  500 }, :call_on_decline ],
    ].detect { |predicate,_|
      predicate.(status)
    }
    else      :call_on_exception
  end
end

!CODE: language=ruby
file://weird/lib/weird/anti_if/outcome_handler_no_if_method.rb

!CODE: language=ruby
file://weird/lib/weird/anti_if/outcome_handler_buggy.rb

!CODE: language=ruby
file://weird/lib/weird/anti_if/outcome_handler_no_if_method.rb

!CODE: language=ruby
class OutcomeNoIf < Outcome

private 

  def what_to_call(status)
    logic = Logic.new

    logic.on { |status| status == 200 }.then_return(:call_on_success)
    logic.on { |status| status  < 500 }.then_return(:call_on_decline)

    logic.evaluate!(status, or_else: :call_on_exception)

  end
end

!CODE: language=ruby callout=11,12
class OutcomeNoIf < Outcome

private 

  def what_to_call(status)
    logic = Logic.new

    logic.on { |status| status == 200 }.then_return(:call_on_success)
    logic.on { |status| status  < 500 }.then_return(:call_on_decline)

    logic.evaluate!(status, or_else: :call_on_exception)
    # => BOOM: NonExclusiveDisjunctionError
  end
end

!CODE: language=ruby callout=9
class OutcomeNoIf < Outcome

private 

  def what_to_call(status)
    logic = Logic.new

    logic.on { |status| status == 200 }.then_return(:call_on_success)
    logic.on { |status| status != 200 && 
                        status  < 500 }.then_return(:call_on_decline)

    logic.evaluate!(status, or_else: :call_on_exception)
    # => All good!
  end
end

!CODE: language=ruby callout=8,9,14,15
class OutcomeNoIf < Outcome

private 

  def what_to_call(status)
    logic = Logic.new

    logic.on(&Success).then_return(:call_on_success)
    logic.on(&Decline).then_return(:call_on_decline)

    logic.evaluate!(status, or_else: :call_on_exception)
  end

  Success = ->(status) { status == 200 }
  Decline = ->(status) { !Success.(status) && status < 500 }
end

!SECTION
Whew!

!FREEFORM
<h1>Stitch Fix</h1>
<h2>Product-minded Engineers—No Pro{ject,duct} Managers</h2>
<h2>A simple and functional business model</h2>
<h2>Info <a href="http://tech.stitchfix.com">tech.stitchfix.com</a></h2>

!FREEFORM
<h1>THANKS!</1>
<table><tbody>
  <tr>
    <td style="text-align: right" colspan='2'><h3>Slides</h3></td>
    <td style="white-space: nowrap"><h3>@</h3></td>
    <td style="white-space: nowrap; text-align: left"><h3><a href="http://bit.ly/weird-ruby">bit.ly/weird-ruby</a></h3></td>
  </tr>
  <tr>
    <td style="text-align: right" colspan='2'><h3>Source</h3></td>
    <td style="white-space: nowrap"><h3>@</h3></td>
    <td style="white-space: nowrap; text-align: left"><h3> <a href="http://bit.ly/weird-ruby-source">bit.ly/weird-ruby-source</a></h3></td>
  </tr>
  <tr>
    <td style="text-align: right; white-space: nowrap; vertical-align: top" colspan='2'><h3>Jobs</h3></td>
    <td style="white-space: nowrap; vertical-align: top"><h3>@</h3></td>
    <td style="text-align:left; vertical-align: top"><h3> <a href="http://tech.stitchfix.com">tech.stitchfix.com</a></h3></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td style="text-align: right; white-space: nowrap; vertical-align: top"><img class="shadow" src="images/cover.jpg" width='100'></td>
    <td style="text-align: right; white-space: nowrap; vertical-align: top"><h3>Buy <em>The Senior Software Engineer</em>&nbsp;</h3></td>
    <td style="white-space: nowrap; vertical-align: top"><h3>@</h3></td>
    <td style="text-align:left; vertical-align: top"><h3><a href="http://sweng.me">sweng.me</a><br>$10 with code<br><strong>codemash2014</strong></h3></td>
  </tr>
  <tr>
    <td style="text-align: right; white-space: nowrap; vertical-align: top"><img class="shadow" src="images/dccar.jpg" width='100'></td>
    <td style="text-align: right; white-space: nowrap; vertical-align: top"><h3>Buy <em>Build Awesome Command-Line<br>Apps in Ruby</em>&nbsp;</h3></td>
    <td style="white-space: nowrap; vertical-align: top"><h3>@</h3></td>
    <td style="text-align:left; vertical-align: top"><h3><a href="http://pragprog.com/book/dccar2">pragprog.com/book/dccar2</a><br>25% off with code<br><strong>codemash2014</strong></h3></td>
  </tr>
</tbody></table>

!FREEFORM
<h1>Colophon</h1>
<hr style="width: 33%">
<h2>Titles in Serifa (Century Schoolbook on web)</h3>
<h2 class="mono">Code Listings in Source Code Pro (Consolas or Courier on web)</h3>
<h2 class="sans">Other Text in Avenir (Century Gothic or Helvetica on web)</h3>
<hr style="width: 33%">
<h3>Make your own slideshow with <a href="http://github.com/davetron5000/trickster">trickster</a></h3>
<div class="images">
<h3>CC-licensed images used:</h3>
<table><tbody>
  <tr>
    <td class="url"> http://farm2.staticflickr.com/1185/5112065674_84e67f1b41_o.jpg </td>
  </tr>
  <tr>
    <td class="url"> http://farm3.staticflickr.com/2568/4170365807_9964740034_b.jpg </td>
  </tr>
  <tr>
    <td class="url"> http://farm6.staticflickr.com/5229/5817035735_e99b206ae0_o.jpg </td>
  </tr>
  <tr>
    <td class="url"> http://farm7.staticflickr.com/6154/6254480784_1b80df41ee_b.jpg </td>
  </tr>
  <tr>
    <td class="url"> http://farm3.staticflickr.com/2554/3737568827_5f903cf17e_b.jpg </td>
  </tr>
</tbody></table>
</div>
